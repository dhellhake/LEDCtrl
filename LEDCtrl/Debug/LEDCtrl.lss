
LEDCtrl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000053e  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800066  00800066  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000080a  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c1  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d1  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000345  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bb  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	2b c0       	rjmp	.+86     	; 0x6c <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee e3       	ldi	r30, 0x3E	; 62
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 36       	cpi	r26, 0x66	; 102
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a6 e6       	ldi	r26, 0x66	; 102
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 36       	cpi	r26, 0x6B	; 107
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	42 d1       	rcall	.+644    	; 0x2d6 <main>
  52:	73 c2       	rjmp	.+1254   	; 0x53a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <InitADC>:
 */
#include "ADClib.h"

void InitADC()
{
	ADMUX =
  56:	83 e0       	ldi	r24, 0x03	; 3
  58:	87 b9       	out	0x07, r24	; 7
		(0 << MUX3)  |     // use ADC2 for input (PB3), MUX bit 3
		(0 << MUX2)  |     // use ADC2 for input (PB3), MUX bit 2
		(1 << MUX1)  |     // use ADC2 for input (PB3), MUX bit 1
		(1 << MUX0);       // use ADC2 for input (PB3), MUX bit 0

	ADCSRA =
  5a:	87 e8       	ldi	r24, 0x87	; 135
  5c:	86 b9       	out	0x06, r24	; 6
  5e:	08 95       	ret

00000060 <GetVin>:
		(1 << ADPS0);      // set prescaler to 128, bit 0
}

uint16_t GetVin()
{
	ADCSRA |= (1 << ADSC);         // start ADC measurement
  60:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
  62:	36 99       	sbic	0x06, 6	; 6
  64:	fe cf       	rjmp	.-4      	; 0x62 <GetVin+0x2>
	
	return ADC;
  66:	84 b1       	in	r24, 0x04	; 4
  68:	95 b1       	in	r25, 0x05	; 5
}
  6a:	08 95       	ret

0000006c <__vector_10>:
volatile daytime_t daytime = INIT;	



ISR(TIMER0_COMPA_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	2c 97       	sbiw	r28, 0x0c	; 12
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61
	if (divider < 60)
  9c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <divider>
  a0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <divider+0x1>
  a4:	cc 97       	sbiw	r24, 0x3c	; 60
  a6:	50 f4       	brcc	.+20     	; 0xbc <__vector_10+0x50>
		divider++;
  a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <divider>
  ac:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <divider+0x1>
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <divider+0x1>
  b6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <divider>
  ba:	f4 c0       	rjmp	.+488    	; 0x2a4 <loop335+0x40>
	else
	{
		float adc_val = ((float)GetVin()) * ADC_LSB;
  bc:	d1 df       	rcall	.-94     	; 0x60 <GetVin>
  be:	bc 01       	movw	r22, r24
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	19 d1       	rcall	.+562    	; 0x2f8 <__floatunsisf>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	40 ea       	ldi	r20, 0xA0	; 160
  cc:	50 e4       	ldi	r21, 0x40	; 64
  ce:	79 d1       	rcall	.+754    	; 0x3c2 <__mulsf3>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	40 e8       	ldi	r20, 0x80	; 128
  d6:	5a e3       	ldi	r21, 0x3A	; 58
  d8:	74 d1       	rcall	.+744    	; 0x3c2 <__mulsf3>
		
		switch (daytime)
  da:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__data_end>
  de:	21 30       	cpi	r18, 0x01	; 1
  e0:	09 f4       	brne	.+2      	; 0xe4 <__vector_10+0x78>
  e2:	5f c0       	rjmp	.+190    	; 0x1a2 <loop198+0x36>
  e4:	20 f0       	brcs	.+8      	; 0xee <__vector_10+0x82>
  e6:	22 30       	cpi	r18, 0x02	; 2
  e8:	09 f4       	brne	.+2      	; 0xec <__vector_10+0x80>
  ea:	9a c0       	rjmp	.+308    	; 0x220 <loop266+0x3a>
  ec:	d7 c0       	rjmp	.+430    	; 0x29c <loop335+0x38>
		{
			case INIT:
			if (adc_val > 2.5f)
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	40 e2       	ldi	r20, 0x20	; 32
  f4:	50 e4       	ldi	r21, 0x40	; 64
  f6:	61 d1       	rcall	.+706    	; 0x3ba <__gesf2>
  f8:	18 16       	cp	r1, r24
  fa:	0c f0       	brlt	.+2      	; 0xfe <__vector_10+0x92>
  fc:	29 c0       	rjmp	.+82     	; 0x150 <loop153+0x36>
inline void ws2812_sendarray_mask(uint8_t *data, uint16_t datlen)
{
	volatile uint8_t curbyte,ctr,masklo;
	uint8_t maskhi = 0b00010000;
	
	masklo	=~maskhi&PORTB;
  fe:	88 b3       	in	r24, 0x18	; 24
 100:	8f 7e       	andi	r24, 0xEF	; 239
 102:	8a 87       	std	Y+10, r24	; 0x0a
	maskhi |= PORTB;
 104:	38 b3       	in	r19, 0x18	; 24
 106:	30 61       	ori	r19, 0x10	; 16
 108:	e0 e6       	ldi	r30, 0x60	; 96
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	43 e6       	ldi	r20, 0x63	; 99
 10e:	50 e0       	ldi	r21, 0x00	; 0
	

	while (datlen--) {
		curbyte=*data++;
 110:	81 91       	ld	r24, Z+
 112:	8c 87       	std	Y+12, r24	; 0x0c
		
		asm volatile(
 114:	9c 85       	ldd	r25, Y+12	; 0x0c
 116:	2a 85       	ldd	r18, Y+10	; 0x0a
 118:	88 e0       	ldi	r24, 0x08	; 8

0000011a <loop153>:
 11a:	38 bb       	out	0x18, r19	; 24
	...
 124:	97 ff       	sbrs	r25, 7
 126:	28 bb       	out	0x18, r18	; 24
 128:	99 0f       	add	r25, r25
	...
 132:	28 bb       	out	0x18, r18	; 24
	...
 13c:	8a 95       	dec	r24
 13e:	69 f7       	brne	.-38     	; 0x11a <loop153>
 140:	8b 87       	std	Y+11, r24	; 0x0b
	
	masklo	=~maskhi&PORTB;
	maskhi |= PORTB;
	

	while (datlen--) {
 142:	e4 17       	cp	r30, r20
 144:	f5 07       	cpc	r31, r21
 146:	21 f7       	brne	.-56     	; 0x110 <__vector_10+0xa4>
			{
				ws2812_sendarray_mask(led_on, 1 * 3);
				daytime = NIGHT;
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 14e:	a6 c0       	rjmp	.+332    	; 0x29c <loop335+0x38>
inline void ws2812_sendarray_mask(uint8_t *data, uint16_t datlen)
{
	volatile uint8_t curbyte,ctr,masklo;
	uint8_t maskhi = 0b00010000;
	
	masklo	=~maskhi&PORTB;
 150:	88 b3       	in	r24, 0x18	; 24
 152:	8f 7e       	andi	r24, 0xEF	; 239
 154:	8f 83       	std	Y+7, r24	; 0x07
	maskhi |= PORTB;
 156:	38 b3       	in	r19, 0x18	; 24
 158:	30 61       	ori	r19, 0x10	; 16
 15a:	e7 e6       	ldi	r30, 0x67	; 103
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	4a e6       	ldi	r20, 0x6A	; 106
 160:	50 e0       	ldi	r21, 0x00	; 0
	

	while (datlen--) {
		curbyte=*data++;
 162:	81 91       	ld	r24, Z+
 164:	89 87       	std	Y+9, r24	; 0x09
		
		asm volatile(
 166:	99 85       	ldd	r25, Y+9	; 0x09
 168:	2f 81       	ldd	r18, Y+7	; 0x07
 16a:	88 e0       	ldi	r24, 0x08	; 8

0000016c <loop198>:
 16c:	38 bb       	out	0x18, r19	; 24
	...
 176:	97 ff       	sbrs	r25, 7
 178:	28 bb       	out	0x18, r18	; 24
 17a:	99 0f       	add	r25, r25
	...
 184:	28 bb       	out	0x18, r18	; 24
	...
 18e:	8a 95       	dec	r24
 190:	69 f7       	brne	.-38     	; 0x16c <loop198>
 192:	88 87       	std	Y+8, r24	; 0x08
	
	masklo	=~maskhi&PORTB;
	maskhi |= PORTB;
	

	while (datlen--) {
 194:	4e 17       	cp	r20, r30
 196:	5f 07       	cpc	r21, r31
 198:	21 f7       	brne	.-56     	; 0x162 <loop153+0x48>
			}
			else
			{
				ws2812_sendarray_mask(led_off, 1 * 3);
				daytime = DAY;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 1a0:	7d c0       	rjmp	.+250    	; 0x29c <loop335+0x38>
			}
			break;
			case DAY:
				if (adc_val > 2.5f)
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	40 e2       	ldi	r20, 0x20	; 32
 1a8:	50 e4       	ldi	r21, 0x40	; 64
 1aa:	07 d1       	rcall	.+526    	; 0x3ba <__gesf2>
 1ac:	18 16       	cp	r1, r24
 1ae:	34 f4       	brge	.+12     	; 0x1bc <loop198+0x50>
					tgl++;
 1b0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tgl>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tgl>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <loop198+0x54>
				else
					tgl = 0;
 1bc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tgl>
				
				if (tgl > 1)
 1c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tgl>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	08 f4       	brcc	.+2      	; 0x1ca <loop198+0x5e>
 1c8:	69 c0       	rjmp	.+210    	; 0x29c <loop335+0x38>
inline void ws2812_sendarray_mask(uint8_t *data, uint16_t datlen)
{
	volatile uint8_t curbyte,ctr,masklo;
	uint8_t maskhi = 0b00010000;
	
	masklo	=~maskhi&PORTB;
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	8f 7e       	andi	r24, 0xEF	; 239
 1ce:	8c 83       	std	Y+4, r24	; 0x04
	maskhi |= PORTB;
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	80 61       	ori	r24, 0x10	; 16
 1d4:	e0 e6       	ldi	r30, 0x60	; 96
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	43 e6       	ldi	r20, 0x63	; 99
 1da:	50 e0       	ldi	r21, 0x00	; 0
	

	while (datlen--) {
		curbyte=*data++;
 1dc:	91 91       	ld	r25, Z+
 1de:	9e 83       	std	Y+6, r25	; 0x06
		
		asm volatile(
 1e0:	2e 81       	ldd	r18, Y+6	; 0x06
 1e2:	3c 81       	ldd	r19, Y+4	; 0x04
 1e4:	98 e0       	ldi	r25, 0x08	; 8

000001e6 <loop266>:
 1e6:	88 bb       	out	0x18, r24	; 24
	...
 1f0:	27 ff       	sbrs	r18, 7
 1f2:	38 bb       	out	0x18, r19	; 24
 1f4:	22 0f       	add	r18, r18
	...
 1fe:	38 bb       	out	0x18, r19	; 24
	...
 208:	9a 95       	dec	r25
 20a:	69 f7       	brne	.-38     	; 0x1e6 <loop266>
 20c:	9d 83       	std	Y+5, r25	; 0x05
	
	masklo	=~maskhi&PORTB;
	maskhi |= PORTB;
	

	while (datlen--) {
 20e:	4e 17       	cp	r20, r30
 210:	5f 07       	cpc	r21, r31
 212:	21 f7       	brne	.-56     	; 0x1dc <loop198+0x70>
				{
					ws2812_sendarray_mask(led_on, 1 * 3);
					tgl = 0;
 214:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tgl>
					daytime = NIGHT;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 21e:	3e c0       	rjmp	.+124    	; 0x29c <loop335+0x38>
				}
			break;
			case NIGHT:
				if (adc_val < 2.2f)
 220:	2d ec       	ldi	r18, 0xCD	; 205
 222:	3c ec       	ldi	r19, 0xCC	; 204
 224:	4c e0       	ldi	r20, 0x0C	; 12
 226:	50 e4       	ldi	r21, 0x40	; 64
 228:	63 d0       	rcall	.+198    	; 0x2f0 <__cmpsf2>
 22a:	88 23       	and	r24, r24
 22c:	34 f4       	brge	.+12     	; 0x23a <loop266+0x54>
					tgl++;
 22e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tgl>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tgl>
 238:	02 c0       	rjmp	.+4      	; 0x23e <loop266+0x58>
				else
					tgl = 0;
 23a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tgl>
			
				if (tgl > 1)
 23e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tgl>
 242:	82 30       	cpi	r24, 0x02	; 2
 244:	08 f4       	brcc	.+2      	; 0x248 <loop266+0x62>
 246:	2a c0       	rjmp	.+84     	; 0x29c <loop335+0x38>
inline void ws2812_sendarray_mask(uint8_t *data, uint16_t datlen)
{
	volatile uint8_t curbyte,ctr,masklo;
	uint8_t maskhi = 0b00010000;
	
	masklo	=~maskhi&PORTB;
 248:	88 b3       	in	r24, 0x18	; 24
 24a:	8f 7e       	andi	r24, 0xEF	; 239
 24c:	89 83       	std	Y+1, r24	; 0x01
	maskhi |= PORTB;
 24e:	88 b3       	in	r24, 0x18	; 24
 250:	80 61       	ori	r24, 0x10	; 16
 252:	e7 e6       	ldi	r30, 0x67	; 103
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	4a e6       	ldi	r20, 0x6A	; 106
 258:	50 e0       	ldi	r21, 0x00	; 0
	

	while (datlen--) {
		curbyte=*data++;
 25a:	91 91       	ld	r25, Z+
 25c:	9b 83       	std	Y+3, r25	; 0x03
		
		asm volatile(
 25e:	2b 81       	ldd	r18, Y+3	; 0x03
 260:	39 81       	ldd	r19, Y+1	; 0x01
 262:	98 e0       	ldi	r25, 0x08	; 8

00000264 <loop335>:
 264:	88 bb       	out	0x18, r24	; 24
	...
 26e:	27 ff       	sbrs	r18, 7
 270:	38 bb       	out	0x18, r19	; 24
 272:	22 0f       	add	r18, r18
	...
 27c:	38 bb       	out	0x18, r19	; 24
	...
 286:	9a 95       	dec	r25
 288:	69 f7       	brne	.-38     	; 0x264 <loop335>
 28a:	9a 83       	std	Y+2, r25	; 0x02
	
	masklo	=~maskhi&PORTB;
	maskhi |= PORTB;
	

	while (datlen--) {
 28c:	4e 17       	cp	r20, r30
 28e:	5f 07       	cpc	r21, r31
 290:	21 f7       	brne	.-56     	; 0x25a <loop266+0x74>
				{
					ws2812_sendarray_mask(led_off, 1 * 3);
					tgl = 0;
 292:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <tgl>
					daytime = DAY;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
				}
			break;
		}
		divider = 0;
 29c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <divider+0x1>
 2a0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <divider>
	}
}
 2a4:	2c 96       	adiw	r28, 0x0c	; 12
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <main>:


int main(void)
{	
	DDRB |= (1 << PB4);
 2d6:	bc 9a       	sbi	0x17, 4	; 23
	
	InitADC();
 2d8:	be de       	rcall	.-644    	; 0x56 <InitADC>
	
	TCCR0A = (1 << WGM01);						//CTC mode
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = (1 << CS00) | (1 << CS02);         //div1024
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	83 bf       	out	0x33, r24	; 51
	OCR0A = 255;								// 50us compare value
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	89 bd       	out	0x29, r24	; 41
	TIMSK |= (1<<OCIE0A);              //if you want interrupt
 2e6:	89 b7       	in	r24, 0x39	; 57
 2e8:	80 61       	ori	r24, 0x10	; 16
 2ea:	89 bf       	out	0x39, r24	; 57
	sei();
 2ec:	78 94       	sei
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <main+0x18>

000002f0 <__cmpsf2>:
 2f0:	40 d0       	rcall	.+128    	; 0x372 <__fp_cmp>
 2f2:	08 f4       	brcc	.+2      	; 0x2f6 <__cmpsf2+0x6>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	08 95       	ret

000002f8 <__floatunsisf>:
 2f8:	e8 94       	clt
 2fa:	09 c0       	rjmp	.+18     	; 0x30e <__floatsisf+0x12>

000002fc <__floatsisf>:
 2fc:	97 fb       	bst	r25, 7
 2fe:	3e f4       	brtc	.+14     	; 0x30e <__floatsisf+0x12>
 300:	90 95       	com	r25
 302:	80 95       	com	r24
 304:	70 95       	com	r23
 306:	61 95       	neg	r22
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	8f 4f       	sbci	r24, 0xFF	; 255
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	99 23       	and	r25, r25
 310:	a9 f0       	breq	.+42     	; 0x33c <__floatsisf+0x40>
 312:	f9 2f       	mov	r31, r25
 314:	96 e9       	ldi	r25, 0x96	; 150
 316:	bb 27       	eor	r27, r27
 318:	93 95       	inc	r25
 31a:	f6 95       	lsr	r31
 31c:	87 95       	ror	r24
 31e:	77 95       	ror	r23
 320:	67 95       	ror	r22
 322:	b7 95       	ror	r27
 324:	f1 11       	cpse	r31, r1
 326:	f8 cf       	rjmp	.-16     	; 0x318 <__floatsisf+0x1c>
 328:	fa f4       	brpl	.+62     	; 0x368 <__floatsisf+0x6c>
 32a:	bb 0f       	add	r27, r27
 32c:	11 f4       	brne	.+4      	; 0x332 <__floatsisf+0x36>
 32e:	60 ff       	sbrs	r22, 0
 330:	1b c0       	rjmp	.+54     	; 0x368 <__floatsisf+0x6c>
 332:	6f 5f       	subi	r22, 0xFF	; 255
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	8f 4f       	sbci	r24, 0xFF	; 255
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	16 c0       	rjmp	.+44     	; 0x368 <__floatsisf+0x6c>
 33c:	88 23       	and	r24, r24
 33e:	11 f0       	breq	.+4      	; 0x344 <__floatsisf+0x48>
 340:	96 e9       	ldi	r25, 0x96	; 150
 342:	11 c0       	rjmp	.+34     	; 0x366 <__floatsisf+0x6a>
 344:	77 23       	and	r23, r23
 346:	21 f0       	breq	.+8      	; 0x350 <__floatsisf+0x54>
 348:	9e e8       	ldi	r25, 0x8E	; 142
 34a:	87 2f       	mov	r24, r23
 34c:	76 2f       	mov	r23, r22
 34e:	05 c0       	rjmp	.+10     	; 0x35a <__floatsisf+0x5e>
 350:	66 23       	and	r22, r22
 352:	71 f0       	breq	.+28     	; 0x370 <__floatsisf+0x74>
 354:	96 e8       	ldi	r25, 0x86	; 134
 356:	86 2f       	mov	r24, r22
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	2a f0       	brmi	.+10     	; 0x368 <__floatsisf+0x6c>
 35e:	9a 95       	dec	r25
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	da f7       	brpl	.-10     	; 0x35e <__floatsisf+0x62>
 368:	88 0f       	add	r24, r24
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret

00000372 <__fp_cmp>:
 372:	99 0f       	add	r25, r25
 374:	00 08       	sbc	r0, r0
 376:	55 0f       	add	r21, r21
 378:	aa 0b       	sbc	r26, r26
 37a:	e0 e8       	ldi	r30, 0x80	; 128
 37c:	fe ef       	ldi	r31, 0xFE	; 254
 37e:	16 16       	cp	r1, r22
 380:	17 06       	cpc	r1, r23
 382:	e8 07       	cpc	r30, r24
 384:	f9 07       	cpc	r31, r25
 386:	c0 f0       	brcs	.+48     	; 0x3b8 <__fp_cmp+0x46>
 388:	12 16       	cp	r1, r18
 38a:	13 06       	cpc	r1, r19
 38c:	e4 07       	cpc	r30, r20
 38e:	f5 07       	cpc	r31, r21
 390:	98 f0       	brcs	.+38     	; 0x3b8 <__fp_cmp+0x46>
 392:	62 1b       	sub	r22, r18
 394:	73 0b       	sbc	r23, r19
 396:	84 0b       	sbc	r24, r20
 398:	95 0b       	sbc	r25, r21
 39a:	39 f4       	brne	.+14     	; 0x3aa <__fp_cmp+0x38>
 39c:	0a 26       	eor	r0, r26
 39e:	61 f0       	breq	.+24     	; 0x3b8 <__fp_cmp+0x46>
 3a0:	23 2b       	or	r18, r19
 3a2:	24 2b       	or	r18, r20
 3a4:	25 2b       	or	r18, r21
 3a6:	21 f4       	brne	.+8      	; 0x3b0 <__fp_cmp+0x3e>
 3a8:	08 95       	ret
 3aa:	0a 26       	eor	r0, r26
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <__fp_cmp+0x3e>
 3ae:	a1 40       	sbci	r26, 0x01	; 1
 3b0:	a6 95       	lsr	r26
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	81 1d       	adc	r24, r1
 3b6:	81 1d       	adc	r24, r1
 3b8:	08 95       	ret

000003ba <__gesf2>:
 3ba:	db df       	rcall	.-74     	; 0x372 <__fp_cmp>
 3bc:	08 f4       	brcc	.+2      	; 0x3c0 <__gesf2+0x6>
 3be:	8f ef       	ldi	r24, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <__mulsf3>:
 3c2:	0a d0       	rcall	.+20     	; 0x3d8 <__mulsf3x>
 3c4:	80 c0       	rjmp	.+256    	; 0x4c6 <__fp_round>
 3c6:	71 d0       	rcall	.+226    	; 0x4aa <__fp_pscA>
 3c8:	28 f0       	brcs	.+10     	; 0x3d4 <__mulsf3+0x12>
 3ca:	76 d0       	rcall	.+236    	; 0x4b8 <__fp_pscB>
 3cc:	18 f0       	brcs	.+6      	; 0x3d4 <__mulsf3+0x12>
 3ce:	95 23       	and	r25, r21
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <__mulsf3+0x12>
 3d2:	62 c0       	rjmp	.+196    	; 0x498 <__fp_inf>
 3d4:	67 c0       	rjmp	.+206    	; 0x4a4 <__fp_nan>
 3d6:	ab c0       	rjmp	.+342    	; 0x52e <__fp_szero>

000003d8 <__mulsf3x>:
 3d8:	87 d0       	rcall	.+270    	; 0x4e8 <__fp_split3>
 3da:	a8 f3       	brcs	.-22     	; 0x3c6 <__mulsf3+0x4>

000003dc <__mulsf3_pse>:
 3dc:	99 23       	and	r25, r25
 3de:	d9 f3       	breq	.-10     	; 0x3d6 <__mulsf3+0x14>
 3e0:	55 23       	and	r21, r21
 3e2:	c9 f3       	breq	.-14     	; 0x3d6 <__mulsf3+0x14>
 3e4:	95 0f       	add	r25, r21
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	55 1f       	adc	r21, r21
 3ea:	aa 27       	eor	r26, r26
 3ec:	ee 27       	eor	r30, r30
 3ee:	ff 27       	eor	r31, r31
 3f0:	bb 27       	eor	r27, r27
 3f2:	00 24       	eor	r0, r0
 3f4:	08 94       	sec
 3f6:	67 95       	ror	r22
 3f8:	20 f4       	brcc	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fa:	e2 0f       	add	r30, r18
 3fc:	f3 1f       	adc	r31, r19
 3fe:	b4 1f       	adc	r27, r20
 400:	0a 1e       	adc	r0, r26
 402:	22 0f       	add	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	44 1f       	adc	r20, r20
 408:	aa 1f       	adc	r26, r26
 40a:	66 95       	lsr	r22
 40c:	a9 f7       	brne	.-22     	; 0x3f8 <__mulsf3_pse+0x1c>
 40e:	77 95       	ror	r23
 410:	30 f4       	brcc	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 412:	f3 0f       	add	r31, r19
 414:	b4 1f       	adc	r27, r20
 416:	0a 1e       	adc	r0, r26
 418:	12 1e       	adc	r1, r18
 41a:	08 f4       	brcc	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	63 95       	inc	r22
 41e:	33 0f       	add	r19, r19
 420:	44 1f       	adc	r20, r20
 422:	aa 1f       	adc	r26, r26
 424:	22 1f       	adc	r18, r18
 426:	76 95       	lsr	r23
 428:	99 f7       	brne	.-26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 42a:	87 95       	ror	r24
 42c:	20 f4       	brcc	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	b4 0f       	add	r27, r20
 430:	0a 1e       	adc	r0, r26
 432:	12 1e       	adc	r1, r18
 434:	63 1f       	adc	r22, r19
 436:	44 0f       	add	r20, r20
 438:	aa 1f       	adc	r26, r26
 43a:	22 1f       	adc	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	86 95       	lsr	r24
 440:	a9 f7       	brne	.-22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 442:	86 2f       	mov	r24, r22
 444:	71 2d       	mov	r23, r1
 446:	60 2d       	mov	r22, r0
 448:	11 24       	eor	r1, r1
 44a:	9f 57       	subi	r25, 0x7F	; 127
 44c:	50 40       	sbci	r21, 0x00	; 0
 44e:	8a f0       	brmi	.+34     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 450:	e1 f0       	breq	.+56     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 452:	88 23       	and	r24, r24
 454:	4a f0       	brmi	.+18     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 456:	ee 0f       	add	r30, r30
 458:	ff 1f       	adc	r31, r31
 45a:	bb 1f       	adc	r27, r27
 45c:	66 1f       	adc	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	91 50       	subi	r25, 0x01	; 1
 464:	50 40       	sbci	r21, 0x00	; 0
 466:	a9 f7       	brne	.-22     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 468:	9e 3f       	cpi	r25, 0xFE	; 254
 46a:	51 05       	cpc	r21, r1
 46c:	70 f0       	brcs	.+28     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 46e:	14 c0       	rjmp	.+40     	; 0x498 <__fp_inf>
 470:	5e c0       	rjmp	.+188    	; 0x52e <__fp_szero>
 472:	5f 3f       	cpi	r21, 0xFF	; 255
 474:	ec f3       	brlt	.-6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 476:	98 3e       	cpi	r25, 0xE8	; 232
 478:	dc f3       	brlt	.-10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 47a:	86 95       	lsr	r24
 47c:	77 95       	ror	r23
 47e:	67 95       	ror	r22
 480:	b7 95       	ror	r27
 482:	f7 95       	ror	r31
 484:	e7 95       	ror	r30
 486:	9f 5f       	subi	r25, 0xFF	; 255
 488:	c1 f7       	brne	.-16     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 48a:	fe 2b       	or	r31, r30
 48c:	88 0f       	add	r24, r24
 48e:	91 1d       	adc	r25, r1
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret

00000498 <__fp_inf>:
 498:	97 f9       	bld	r25, 7
 49a:	9f 67       	ori	r25, 0x7F	; 127
 49c:	80 e8       	ldi	r24, 0x80	; 128
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	08 95       	ret

000004a4 <__fp_nan>:
 4a4:	9f ef       	ldi	r25, 0xFF	; 255
 4a6:	80 ec       	ldi	r24, 0xC0	; 192
 4a8:	08 95       	ret

000004aa <__fp_pscA>:
 4aa:	00 24       	eor	r0, r0
 4ac:	0a 94       	dec	r0
 4ae:	16 16       	cp	r1, r22
 4b0:	17 06       	cpc	r1, r23
 4b2:	18 06       	cpc	r1, r24
 4b4:	09 06       	cpc	r0, r25
 4b6:	08 95       	ret

000004b8 <__fp_pscB>:
 4b8:	00 24       	eor	r0, r0
 4ba:	0a 94       	dec	r0
 4bc:	12 16       	cp	r1, r18
 4be:	13 06       	cpc	r1, r19
 4c0:	14 06       	cpc	r1, r20
 4c2:	05 06       	cpc	r0, r21
 4c4:	08 95       	ret

000004c6 <__fp_round>:
 4c6:	09 2e       	mov	r0, r25
 4c8:	03 94       	inc	r0
 4ca:	00 0c       	add	r0, r0
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <__fp_round+0xc>
 4ce:	88 23       	and	r24, r24
 4d0:	52 f0       	brmi	.+20     	; 0x4e6 <__fp_round+0x20>
 4d2:	bb 0f       	add	r27, r27
 4d4:	40 f4       	brcc	.+16     	; 0x4e6 <__fp_round+0x20>
 4d6:	bf 2b       	or	r27, r31
 4d8:	11 f4       	brne	.+4      	; 0x4de <__fp_round+0x18>
 4da:	60 ff       	sbrs	r22, 0
 4dc:	04 c0       	rjmp	.+8      	; 0x4e6 <__fp_round+0x20>
 4de:	6f 5f       	subi	r22, 0xFF	; 255
 4e0:	7f 4f       	sbci	r23, 0xFF	; 255
 4e2:	8f 4f       	sbci	r24, 0xFF	; 255
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	08 95       	ret

000004e8 <__fp_split3>:
 4e8:	57 fd       	sbrc	r21, 7
 4ea:	90 58       	subi	r25, 0x80	; 128
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	59 f0       	breq	.+22     	; 0x508 <__fp_splitA+0x10>
 4f2:	5f 3f       	cpi	r21, 0xFF	; 255
 4f4:	71 f0       	breq	.+28     	; 0x512 <__fp_splitA+0x1a>
 4f6:	47 95       	ror	r20

000004f8 <__fp_splitA>:
 4f8:	88 0f       	add	r24, r24
 4fa:	97 fb       	bst	r25, 7
 4fc:	99 1f       	adc	r25, r25
 4fe:	61 f0       	breq	.+24     	; 0x518 <__fp_splitA+0x20>
 500:	9f 3f       	cpi	r25, 0xFF	; 255
 502:	79 f0       	breq	.+30     	; 0x522 <__fp_splitA+0x2a>
 504:	87 95       	ror	r24
 506:	08 95       	ret
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	55 1f       	adc	r21, r21
 510:	f2 cf       	rjmp	.-28     	; 0x4f6 <__fp_split3+0xe>
 512:	46 95       	lsr	r20
 514:	f1 df       	rcall	.-30     	; 0x4f8 <__fp_splitA>
 516:	08 c0       	rjmp	.+16     	; 0x528 <__fp_splitA+0x30>
 518:	16 16       	cp	r1, r22
 51a:	17 06       	cpc	r1, r23
 51c:	18 06       	cpc	r1, r24
 51e:	99 1f       	adc	r25, r25
 520:	f1 cf       	rjmp	.-30     	; 0x504 <__fp_splitA+0xc>
 522:	86 95       	lsr	r24
 524:	71 05       	cpc	r23, r1
 526:	61 05       	cpc	r22, r1
 528:	08 94       	sec
 52a:	08 95       	ret

0000052c <__fp_zero>:
 52c:	e8 94       	clt

0000052e <__fp_szero>:
 52e:	bb 27       	eor	r27, r27
 530:	66 27       	eor	r22, r22
 532:	77 27       	eor	r23, r23
 534:	cb 01       	movw	r24, r22
 536:	97 f9       	bld	r25, 7
 538:	08 95       	ret

0000053a <_exit>:
 53a:	f8 94       	cli

0000053c <__stop_program>:
 53c:	ff cf       	rjmp	.-2      	; 0x53c <__stop_program>
